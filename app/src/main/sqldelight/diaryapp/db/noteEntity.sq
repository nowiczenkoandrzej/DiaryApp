

CREATE TABLE IF NOT EXISTS noteEntity  (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    description TEXT NOT NULL,
    timestamp TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    weather_id INTEGER,
    location TEXT,
    FOREIGN KEY (weather_id) REFERENCES weatherEntity(id)
);

CREATE TABLE IF NOT EXISTS weatherEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    temperature REAL NOT NULL,
    weather_type INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS notes_categories (
    note_id INTEGER,
    category_id INTEGER,
    PRIMARY KEY (note_id, category_id)
);

CREATE TABLE IF NOT EXISTS categoryEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    background_color TEXT NOT NULL,
    name TEXT NOT NULL
);

CREATE VIEW IF NOT EXISTS note_view AS
SELECT
    noteEntity.id AS note_id,
    noteEntity.description AS note_content,
    noteEntity.timestamp AS timestamp,
    noteEntity.weather_id AS weather_id,
    noteEntity.location AS location,
    weatherEntity.temperature AS temperature,
    weatherEntity.weather_type AS weather_type,
    categoryEntity.id AS category_id,
    categoryEntity.background_color AS bg_color,
    categoryEntity.name AS category_name
FROM
    noteEntity
LEFT JOIN
    weatherEntity ON noteEntity.weather_id = weatherEntity.id
LEFT JOIN
    notes_categories ON noteEntity.id = notes_categories.note_id
LEFT JOIN
    categoryEntity ON notes_categories.category_id = categoryEntity.id;

getNoteById:
SELECT *
FROM note_view
WHERE note_id = :id;

getNotesByContent:
SELECT *
FROM note_view
WHERE note_content LIKE ('%' || :content || '%')
ORDER BY timestamp DESC;


getNotesByDateAndCategory:
SELECT *
FROM note_view
WHERE
    (timestamp >= :startDate)
    AND (timestamp <= :endDate)
    AND (category_name = :category)
ORDER BY timestamp DESC;

getNotesByCategory:
SELECT *
FROM note_view
WHERE
    category_name = :category
ORDER BY timestamp DESC;

getNotesByDates:
SELECT *
FROM note_view
WHERE timestamp BETWEEN :from AND :to
ORDER BY timestamp DESC;



insertNote:
INSERT OR REPLACE
INTO noteEntity
VALUES(?, ?, ?, ?, ?);

insertWeatherInfo:
INSERT OR REPLACE
INTO weatherEntity
VALUES (?,?,?);

getLastWeatherInfoIndex:
SELECT id
FROM weatherEntity
ORDER BY id DESC
LIMIT 1;

getLastNoteIndex:
SELECT id
FROM noteEntity
ORDER BY id DESC
LIMIT 1;

getAllCategories:
SELECT *
FROM categoryEntity;

addNewCategory:
INSERT OR REPLACE
INTO categoryEntity
VALUES (?, ?, ?);

deleteNote:
DELETE FROM noteEntity
WHERE id = :id;

insertNotesCategories:
INSERT OR REPLACE
INTO notes_categories
VALUES (?,?);



INSERT INTO categoryEntity (background_color, name) VALUES ('0xFFD6D6D6', 'Family');
INSERT INTO categoryEntity (background_color, name) VALUES ('0xFF85BFCD', 'Friends');
INSERT INTO categoryEntity (background_color, name) VALUES ('0xFF27A2BB', 'Work');
INSERT INTO categoryEntity (background_color, name) VALUES ('0xFFF4B076', 'School');
INSERT INTO categoryEntity (background_color, name) VALUES ('0xFFFAB10C', 'Hobby');
INSERT INTO categoryEntity (background_color, name) VALUES ('0xFF85BFCD', 'Cooking');